apply plugin: 'jacoco'

ext {
    MERGED_FILE = "$rootDir/coverage/mergedcoverage.ec"
    COVERAGE_DATA_FILES = "$rootDir/coverage"
    REPORT_FILE = "$rootDir/coverage/JacocoReport"
    SOURCE_DIRECTORIES = "src/main/java"
}

jacoco {
    toolVersion = "0.7.4.201502262128" //指定jacoco的版本，该设置没有用
    reportsDir = file("$REPORT_FILE") //指定jacoco生成报告的文件夹
}

task copyCoverageData {
    doFirst {
        println "copy files from /sdcard/coverage to $COVERAGE_DATA_FILES"
        String command = "adb pull /sdcard/coverage/ $COVERAGE_DATA_FILES"
        command.execute()
    }
}

//首先先删除旧的merge结果文件
task removeOldFiles(type: Delete, dependsOn: copyCoverageData) {
    delete "$MERGED_FILE"
    delete "$REPORT_FILE"
}

task mergeReport(type: JacocoMerge, dependsOn: removeOldFiles){
    group = "reporting"
    description = "merge jacoco report."
    destinationFile= file("$MERGED_FILE")
    //这里的ec_dir是存储ec文件的文件夹
    FileTree tree = fileTree("$COVERAGE_DATA_FILES") {
        include '**/*.ec'
    }
    executionData = tree
}

task gitDiffFiles {
    // 当前工作站相对于上次commit修改了哪些文件
    String cmd = "git diff --name-only --diff-filter=ACMRTUXB  HEAD"
    if (project.hasProperty("branchBeginGitVersion") && !((String) branchBeginGitVersion).isEmpty()) {
        cmd = "git diff --name-only --diff-filter=ACMRTUXB $branchBeginGitVersion HEAD"
    }
    println cmd
    String changeInfo = cmd.execute().text.trim()
    def changeFileList = new ArrayList<String>()
    def changeOriginFileList = new ArrayList<String>()
    changeInfo.split("\\n").each {
        if (it.endsWith(".java")) {
            changeOriginFileList.add(it)
            def className = it.substring(it.lastIndexOf('/') + 1, it.lastIndexOf(".java"))
            changeFileList.add("**/$className.*")
            changeFileList.add("**/$className*.*")
        }
    }
    ext.changedFiles = changeFileList
    ext.changedOriginFileList = changeOriginFileList
    println ext.changedFiles
}

// ./gradlew jacocotestreport -PbranchBeginGitVersion=b8cf554f648755e328ab7bedc5604fee82c5d7e7 -Dfile.encoding=UTF-8

task jacocoTestReport(type: JacocoReport, dependsOn: mergeReport) {
    group = "reporting"
    description = "generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            includes: gitDiffFiles.changedFiles,
            excludes: ['**/R*.class',
                       '**/BuildConfig.*',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class',
                       '**/Manifest*.*'
            ])
    sourceDirectories = files("${project.projectDir}/$SOURCE_DIRECTORIES")
    executionData = files("$MERGED_FILE")

    doFirst {
        println "diff file name: " + gitDiffFiles.changedFiles
    }

    doLast {
        ArrayList<String> changeOriginFileList = gitDiffFiles.changedOriginFileList
        changeOriginFileList.each {
            String cmd = "git diff HEAD " + it
            if (project.hasProperty("branchBeginGitVersion") && !((String) branchBeginGitVersion).isEmpty()) {
                cmd = "git diff $branchBeginGitVersion HEAD " + it
            }
            String changeInfo = cmd.execute().text.trim()
            println changeInfo

            ArrayList<Integer> changedLines = new ArrayList<>()
            changeInfo.split("\\n").each {
                if (it.startsWith("@@ ")) {
                    String[] pos = it.substring(it.indexOf('+') + 1, it.lastIndexOf(" @@")).trim().split(',')
                    int startPos = Integer.valueOf(pos[0])
                    changedLines.add(startPos)
                    changedLines.add(startPos + Integer.valueOf(pos[1]))
                }
            }
            println changedLines
            String subPath = it.substring(it.indexOf("$SOURCE_DIRECTORIES") + 1 + "$SOURCE_DIRECTORIES".length())
            int index = subPath.lastIndexOf('/')
            def path =  "$REPORT_FILE/jacocoTestReport/html/" +
                    subPath.substring(0, index).replace('/', '.') + File.separator + subPath.substring(index + 1) + ".html"
            def readerString = ""
            def lineNum = 0
            new File(path).withReader('UTF-8') { reader ->
                reader.eachLine {
                    boolean changed = false
                    for (int i = 0; i < changedLines.size(); i += 2) {
                        changed = lineNum >= changedLines.get(i) && lineNum <= changedLines.get(i + 1)
                        if (changed) {
                            break
                        }
                    }
                    if (changed) {
                        readerString = readerString + "+++ " + it + '\n'
                    } else {
                        readerString = readerString + it + '\n'
                    }
                    lineNum++
                }
            }
            new File(path).withWriter('UTF-8') {
                it.append(readerString)
            }
        }
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            ["/bin/bash", "-c", "open $REPORT_FILE/jacocoTestReport/html/index.html"].execute()
        }
    }
}
