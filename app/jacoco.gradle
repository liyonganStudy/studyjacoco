apply plugin: 'jacoco'

ext {
    MERGED_FILE = "$rootDir/coverage/mergedcoverage.ec"
    COVERAGE_DATA_FILES = "$rootDir/coverage"
    REPORT_FILE = "$rootDir/coverage/JacocoReport"
}

jacoco {
    toolVersion = "0.7.4.201502262128" //指定jacoco的版本，该设置没有用
    reportsDir = file("$REPORT_FILE") //指定jacoco生成报告的文件夹
}

task copyCoverageData {
    doFirst {
        println "copy files from /sdcard/coverage to $COVERAGE_DATA_FILES"
        String command = "adb pull /sdcard/coverage/ $COVERAGE_DATA_FILES"
        command.execute()
    }
}

//首先先删除旧的merge结果文件
task removeOldFiles(type: Delete, dependsOn: copyCoverageData) {
    delete "$MERGED_FILE"
    delete "$REPORT_FILE"
}

task mergeReport(type: JacocoMerge, dependsOn: removeOldFiles){
    group = "reporting"
    description = "merge jacoco report."
    destinationFile= file("$MERGED_FILE")
    //这里的ec_dir是存储ec文件的文件夹
    FileTree tree = fileTree("$COVERAGE_DATA_FILES") {
        include '**/*.ec'
    }
    executionData = tree
}

task gitDiffFiles {
    // 当前工作站相对于上次commit修改了哪些文件
    String cmd = "git diff --name-only --diff-filter=ACMRTUXB  HEAD"
    if (project.hasProperty("branchBeginGitVersion") && !((String) branchBeginGitVersion).isEmpty()) {
        cmd = "git diff --name-only --diff-filter=ACMRTUXB $branchBeginGitVersion HEAD"
    }
    println cmd
    String changeInfo = cmd.execute().text.trim()
    def changeFileList = new ArrayList<String>()
    changeInfo.split("\\n").each {
        if (it.endsWith(".java")) {
            def className = it.substring(it.lastIndexOf('/') + 1, it.lastIndexOf(".java"))
            changeFileList.add("**/$className.*")
            changeFileList.add("**/$className*.*")
        }
    }
    ext.changedFiles = changeFileList
    println ext.changedFiles
}

task jacocoTestReport(type: JacocoReport, dependsOn: mergeReport) {
    group = "reporting"
    description = "generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            includes: gitDiffFiles.changedFiles,
            excludes: ['**/R*.class',
                       '**/BuildConfig.*',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class',
                       '**/Manifest*.*'
            ])
    sourceDirectories = files("${project.projectDir}/src/main/java")
    executionData = files("$MERGED_FILE")

    doFirst {
        println "diff file name: " + gitDiffFiles.changedFiles
    }

    doLast {
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            ["/bin/bash", "-c", "open $REPORT_FILE/jacocoTestReport/html/index.html"].execute()
        }
    }
}
